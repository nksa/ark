/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.test.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.AuditedModel;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.sql.Blob;

import java.util.Date;

/**
 * The base model interface for the Contact service. Represents a row in the &quot;vega_Contact&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.test.model.impl.ContactModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.test.model.impl.ContactImpl}.
 * </p>
 *
 * @author nxant
 * @see Contact
 * @see com.test.model.impl.ContactImpl
 * @see com.test.model.impl.ContactModelImpl
 * @generated
 */
public interface ContactModel extends AuditedModel, BaseModel<Contact> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a contact model instance should use the {@link Contact} interface instead.
	 */

	/**
	 * Returns the primary key of this contact.
	 *
	 * @return the primary key of this contact
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this contact.
	 *
	 * @param primaryKey the primary key of this contact
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the person ID of this contact.
	 *
	 * @return the person ID of this contact
	 */
	public long getPersonId();

	/**
	 * Sets the person ID of this contact.
	 *
	 * @param personId the person ID of this contact
	 */
	public void setPersonId(long personId);

	/**
	 * Returns the company ID of this contact.
	 *
	 * @return the company ID of this contact
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this contact.
	 *
	 * @param companyId the company ID of this contact
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this contact.
	 *
	 * @return the user ID of this contact
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this contact.
	 *
	 * @param userId the user ID of this contact
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this contact.
	 *
	 * @return the user uuid of this contact
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this contact.
	 *
	 * @param userUuid the user uuid of this contact
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this contact.
	 *
	 * @return the user name of this contact
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this contact.
	 *
	 * @param userName the user name of this contact
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this contact.
	 *
	 * @return the create date of this contact
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this contact.
	 *
	 * @param createDate the create date of this contact
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this contact.
	 *
	 * @return the modified date of this contact
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this contact.
	 *
	 * @param modifiedDate the modified date of this contact
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the first name of this contact.
	 *
	 * @return the first name of this contact
	 */
	@AutoEscape
	public String getFirstName();

	/**
	 * Sets the first name of this contact.
	 *
	 * @param firstName the first name of this contact
	 */
	public void setFirstName(String firstName);

	/**
	 * Returns the last name of this contact.
	 *
	 * @return the last name of this contact
	 */
	@AutoEscape
	public String getLastName();

	/**
	 * Sets the last name of this contact.
	 *
	 * @param lastName the last name of this contact
	 */
	public void setLastName(String lastName);

	/**
	 * Returns the nick name of this contact.
	 *
	 * @return the nick name of this contact
	 */
	@AutoEscape
	public String getNickName();

	/**
	 * Sets the nick name of this contact.
	 *
	 * @param nickName the nick name of this contact
	 */
	public void setNickName(String nickName);

	/**
	 * Returns the birthday of this contact.
	 *
	 * @return the birthday of this contact
	 */
	public Date getBirthday();

	/**
	 * Sets the birthday of this contact.
	 *
	 * @param birthday the birthday of this contact
	 */
	public void setBirthday(Date birthday);

	/**
	 * Returns the age of this contact.
	 *
	 * @return the age of this contact
	 */
	public int getAge();

	/**
	 * Sets the age of this contact.
	 *
	 * @param age the age of this contact
	 */
	public void setAge(int age);

	/**
	 * Returns the friend of this contact.
	 *
	 * @return the friend of this contact
	 */
	public boolean getFriend();

	/**
	 * Returns <code>true</code> if this contact is friend.
	 *
	 * @return <code>true</code> if this contact is friend; <code>false</code> otherwise
	 */
	public boolean isFriend();

	/**
	 * Sets whether this contact is friend.
	 *
	 * @param friend the friend of this contact
	 */
	public void setFriend(boolean friend);

	/**
	 * Returns the relative of this contact.
	 *
	 * @return the relative of this contact
	 */
	public boolean getRelative();

	/**
	 * Returns <code>true</code> if this contact is relative.
	 *
	 * @return <code>true</code> if this contact is relative; <code>false</code> otherwise
	 */
	public boolean isRelative();

	/**
	 * Sets whether this contact is relative.
	 *
	 * @param relative the relative of this contact
	 */
	public void setRelative(boolean relative);

	/**
	 * Returns the image of this contact.
	 *
	 * @return the image of this contact
	 */
	public Blob getImage();

	/**
	 * Sets the image of this contact.
	 *
	 * @param image the image of this contact
	 */
	public void setImage(Blob image);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(com.test.model.Contact contact);

	@Override
	public int hashCode();

	@Override
	public CacheModel<com.test.model.Contact> toCacheModel();

	@Override
	public com.test.model.Contact toEscapedModel();

	@Override
	public com.test.model.Contact toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}